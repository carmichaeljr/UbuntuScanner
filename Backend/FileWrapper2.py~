import os
import platform
import linecache


class File(object):
	numOpenFiles=0
	
	@classmethod
	def incrementNumOpenFiles(cls):
		cls.numOpenFile+=1
		
	@classmethod
	def dincrementNumOpenFiles(cls):
		cls.numOpenFiles-=1
	
	def __init__(self,filePath,fileName):
		self._initPathVars(filePath,fileName)
		self._openForFirstTime()
		self._initFileVars()
		
	def __del__(self):
		if self._file!=None:
			self._closeFile()
		
	def _initPathVars(self,filePath,fileName):
		self._filePath=filePath
		self._fileName=fileName
		self._fileExtension=fileName.split(".")[1]
		if platform.system().lower()=="linux":
			self._absolutePath=self._filePath+"/"+self._fileName
			print("Linux!")
		elif platform.system().lower()=="windows":
			self._absolutePath=self._filePath+"\\"+self._fileName
			print("Windows...")
		else :
			print("Crapppppllle")
		print(self._absolutePath)
		
	def _initFileVars(self):
		for x in self._openCloseFileGenerator('r'):
			self._numLines=0
			for line in self._file:
				self._numLines+=1 
				
	@property	
	def filePath(self):
		return self._filePath
		
	@property
	def fileName(self):
		return self._fileName
		
	@property
	def fileExtension(self):
		return self._fileExtension
		
	@property
	def absolutePath(self):
		return self._absolutePath
		
	@property
	def numLines(self):
		return self._numLines
		
	def _openForFirstTime(self):
		try:
			self._file=open(self._absolutePath,'r')
		except IOError:
			self._file=open(self._absolutePath,'w')
		finally:
			self._file.close()
	
	def _openCloseFileGenerator(self,newMode):
		self._openFile(newMode)
		yield
		self._closeFile()
			
	def _openFile(self,newMode):
		if newMode.lower() in ['r','rb','r+','rb+','w','wb','w+','wb+','a','ab','a','ab+']:
			self._file=open(self._absolutePath,newMode)
			File.incrementNumOpenFiles()
		
	def _closeFile(self):
		self._file.close()
		self._file=None
		File.dincrementNumOpenFiles()
		
	def readLine(self,line):
		if isinstance(line,int) and line<=self._numLines:
			return linecache.getline(self.absolutePath, line).rstrip()
		else:
			print("!> The given line({0}) excedes the files length({1})".
				  format(line,self.numLines))
			return ""
			
	def writeLine(self,newLine):
		if not isinstance(newLine,str):
			newLine=str(newLine)
		for x in self._openCloseFileGenerator('a'):
			self._file.write(newLine if newLine[len(newLine)-1]=='\n' else newLine+'\n')
			self._numLines+=1
			
	def deleteLine(self,lineContents):
		if not(isinstance(lineContents,str) and 
		   lineContents[len(lineContents)-1]=='\n'):
			lineContents=str(lineContents)+'\n'
		for x in self._openCloseFileGenerator('r+'):
			allLines=self._file.readlines()
			self._file.seek(0)
			for line in allLines:
				if not line.lower()==lineContents.lower():
					self._file.write(line)
				else:
					print("deleted")
			self._file.truncate()
		
if __name__=="__main__":
	testFile=File("/media/jack/USB_16GB/Temp Python Programs/Ubuntu Scanner/Backend","TestFile.txt")
	# testFile=File("D:\\Temp Python Programs\\Ubuntu Scanner\\Backend","filenames.txt")
	print(testFile.readLine(2))
	print(testFile.readLine(30))
	testFile.writeLine("THIS IS A TEST")
	testFile.writeLine("THIS IS A TEST")
	print(testFile.numLines)
	testFile.deleteLine("HELLO")
	 
